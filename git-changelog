#!/bin/bash

set -o pipefail
set -o nounset

HEADING_LEVEL=1
SHOW_DATES=false
TITLE="Changelog"
GREP=""

COMMIT="HEAD"
SINCE=""
USE_SHORTLOG=false
PRETTY_FORMAT="%s"
DATE_FORMAT="%e %B %Y"
HEADING_CHAR="#"
readonly GIT_ARGS="--no-decorate"

usage() {
	local prog=$(basename "$0")
	cat <<-END
	$prog

	USAGE

	  $prog [OPTIONS] [COMMIT]

	PARAMETERS

	  COMMIT is a git hash/branch/tag.
	  If COMMIT is empty, it defaults to HEAD

	OPTIONS

	  -h, --help                   This help

	  -d[FORMAT]
	  --show-dates[=FORMAT]        If this is set, dates are added to
	                               each tag. Optional format is for strftime or
	                               git log. ie 'default' 'unix'
	                               Default format is strftime '%e %B %Y'

	  -H LEVEL
	  --heading LEVEL
	  --heading-level LEVEL        Set markdown heading level to LEVEL
	                               LEVEL is 1 by default, ie. ##

	  -L
	  --last                       Only list changes since last tag
	                               See also: --since

	  -f PATTERN
	  -g PATTERN
	  --grep PATTERN               filter commits only showing those matching PATTERN

	  -F FORMAT
	  --format FORMAT              Format for git log lines, default is "- %s"

	  -A CHAR
	  --heading-char CHAR          Char used for markdown headings, default is "#"

	  -G
	  --group-by-author            Output commits grouped per author

	  -s TAG
	  --since TAG                  Only list changes since TAG

	  -t TITLE
	  --title TITLE                Show title of TITLE at top
	                               (heading level will be increased
	                               by 1 after title)
	                               TITLE is "Changelog" by default, use
	                               '-T' to omit

	  -T
	  --no-title                   Suppress title
END
	exit 2
}

parseCLI() {
	local opts

	if ! opts=$(
		getopt \
		-q \
		-n "$(basename "$0")" \
		-o hH:d::t:f:g:F:TGs:LA: \
		--long help,heading-level:,heading:,show-dates::,title:,grep:,filter:,format:,no-title,group-by-author,since:,last,heading-char: \
		-- "$@"
	); then
		usage
	fi

	eval set -- "$opts"

	while true; do
			case "$1" in
					-h|--help)   usage;;
					-d|--show-dates)
						SHOW_DATES=true

						if [[ -n $2 ]]; then
							DATE_FORMAT="$2"
						fi
						shift 2;;
					-G|--group-by-author)
						USE_SHORTLOG=true
						shift;;
					-H|--heading-level|--heading)
						HEADING_LEVEL="$2";
						shift 2;;
					-t|--title)
						TITLE="$2"
						shift 2;;
					-T|--no-title)
						TITLE=""
						shift;;
					-f|-g|--grep|--filter)
						GREP="$2"
						shift 2;;
					-F|--format)
						PRETTY_FORMAT="$2"
						shift 2;;
					-s|--since)
						SINCE="$2";
						shift 2;;
					-L|--last)
						setSinceFromLastTag
						shift;;
					-A|--heading-char)
						HEADING_CHAR="$2"
						shift 2;;
					--)
						shift;
						break;;
					*)
						echo "Bad argument '$1'" >&2
						usage;
			esac
	done

	COMMIT="${1:-HEAD}"
}

setSinceFromLastTag() {
	local currentTag;

	currentTag=$(getCurrentTag)
	if [[ $? -ne 0 || -z $currentTag ]]; then
		echo "Unable to get last tag" >&2
		exit 2
	fi

	SINCE=$(getPreviousTag "$currentTag")
	if [[ $? -ne 0 || -z $currentTag ]]; then
		echo "Unable to get last tag" >&2
		exit 2
	fi
}

getCurrentTag() {
	git describe --tags "${1:-${COMMIT}}"
}

getPreviousTag() {
	if [[ $# -lt 1 ]]; then
		echo "getPreviousTag given no current tag" >&2
		exit 1;
	fi
	local current="$1"
	local sinceCheck=''

	# if [[ -n $SINCE ]]; then
	# 	sinceCheck="if (\$0 == \"${SINCE}\") { exit };"
	# fi

	# echo  awk "{ if (!prev) { prev=\$0 }; ${sinceCheck} if (\$0 == \"${current}\") { exit }; prev=\$0 } END { print prev }"
	git tag -l --sort=v:refname \
		| awk "{ if (prev == \"\") { prev=\$0 }; ${sinceCheck} if (\$0 == \"${current}\") { exit }; prev=\$0 } END { print prev }"
}

makeHeading() {
	local content="$1"
	local level="${2:-HEADING_LEVEL}"
	local i
	local heading=""

	for (( i = 0; i < $level; i++ )); do
		heading="${heading}${HEADING_CHAR}"
	done
	echo "$heading $content"
}

getTagDate() {
	git log -n1 --pretty="format:%cd" --date="format:${DATE_FORMAT}" "$1"
}

getCommitsShort() {
	local previousTag="$1"
	local currentTag="$2"
	local grep="$3"

	if [[ -z "$grep" ]]; then
		git shortlog -n -e -w76,3,4 --format="${PRETTY_FORMAT}" "${previousTag}..${currentTag}" \
		| sed -r 's/^([^ \t])/- \0/;s/^\s{3}/    /'| sed -r 's/^/- /'
	else
		git shortlog -n -e -w76,3,4 --format="${PRETTY_FORMAT}" "${previousTag}..${currentTag}" \
		| grep -E "$grep"| sed -r 's/^/- /'
	fi
}

getCommits() {
	local previousTag="$1"
	local currentTag="$2"
	local grep="$3"

	if $USE_SHORTLOG; then
		return getCommitsShort "$previousTag" "$currentTag" "$grep"
	fi

	if [[ -z "$grep" ]]; then
		git log $GIT_ARGS \
			--date="format:${DATE_FORMAT}" \
			--pretty="format:${PRETTY_FORMAT}" \
			"${previousTag}..${currentTag}" \
			| grep -vE '(Bump\s+(\w+\s+)?version)|(^v[0-9\.]+)'| sed -r 's/^/- /'
	else
		git log $GIT_ARGS \
			--date="format:${DATE_FORMAT}" \
			--pretty="format:${PRETTY_FORMAT}" \
			"${previousTag}..${currentTag}" \
			| grep -E "$grep" | sed -r 's/^/- /'
	fi
}

main() {
	parseCLI "$@"

	local currentTag=$(getCurrentTag);

	if [[ $? -ne 0 || -z "$currentTag" ]]; then
		echo "No current tag, cannot list changelog" >&2
		exit 1
	fi

	if [[ $currentTag == $SINCE ]]; then
		echo -e "SINCE is equal to current tag, cannot list changelog.\nTry using a different value for --since" >&2
		exit 1
	fi

	local previousTag=$(getPreviousTag "$currentTag")

	if [[ $? -ne 0 || -z "$previousTag" ]]; then
		echo "No previous tags, cannot list changelog" >&2
		exit 1
	fi

	if [[ -n $TITLE ]]; then
		makeHeading "$TITLE"; echo
		HEADING_LEVEL=$((HEADING_LEVEL + 1))
	fi

	local heading

	while [[ -n $previousTag && $previousTag != $currentTag ]]; do
		if [[ $currentTag == $SINCE ]]; then
			break;
		fi
		heading="$currentTag"

		if $SHOW_DATES; then
			 heading="$heading -- $(getTagDate "$currentTag")"
		fi

		local commits=""

		commits=$(
			getCommits "$previousTag" "$currentTag" "$GREP"
		)

		if [[ -n "$commits" ]]; then
			makeHeading "$heading"; echo
			cat <<<$commits
			echo
		fi
		currentTag="$previousTag"
		previousTag=$(getPreviousTag "$currentTag")
	done
}

mainPaged() {
	if [[ -p /dev/stdout ]]; then
		main "$@"
	else
		main "$@" | less
	fi
}

mainPaged "$@"
