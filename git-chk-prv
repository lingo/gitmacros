#!/bin/bash
fileName=""
gitFileName=""
revision=""
writeOnly=false
outFileName=""
quiet=false

usage() {
    echo "Usage: $0 [-w|--write-only] [-q|--quiet] <file> [<revision>] "
	echo
	echo -e "\t<revision> defaults to HEAD^, i.e. previous version"
	echo -e "\t--write-only will just overwrite the current file with the"
	echo -e "\t\tversion from <revision>, after prompting."
	echo -e "\t--quiet will use 'diff -q' instead of your git difftool"
    exit 1
}

parseArgs() {
    local args=$( getopt -a -n "git-chk-prv" -l "help,quiet,write-only" -o "qwh" -- "$@" )
    if [[ $? -ne 0 ]]; then
        usage
    fi
    eval set -- "$args"
    while true ; do
        case "$1" in
            -w|--write-only)
                writeOnly=true;
                shift;;
            -q|--quiet)
                quiet=true;
                shift;;
            --)
                shift;
                break;;
            *)
                usage;
                break;;
        esac
    done
    if [[ ${#@} -gt 2 ]]; then
        echo "Found unexpected argument: '$3'"
        usage;
    fi

    fileName="$1"
    if [ "x$fileName" = "x" ]; then
        usage;
    fi

    revision="${2:-HEAD^}"
}

adjustPaths() {
    local gitRoot=$(git rev-parse --show-toplevel)
    fileName=$(realpath $fileName)
    gitFileName=$(realpath --relative-to="$gitRoot" "$fileName")
    outFileName="${revision}_${fileName}"
    outFileName=$(echo "$outFileName" | sed -r 's/\W+/_/g')
}

gitFetchFile() {
    if [[ "$writeOnly" == true ]]; then
		echo "Really overwrite $fileName? (Ctrl-C to cancel)"
		read
        git cat-file blob "${revision}:${gitFileName}" > $fileName
    fi

    git cat-file blob "${revision}:${gitFileName}" > "/tmp/$outFileName"
    # echo "$fileName $revision $outFileName"
}

getGitDiffTool() {
    local diffTool="$(git config diff.tool)"
    if [ "x$GIT_EXTERNAL_DIFF" != "x" ]; then
        $diffTool="$GIT_EXTERNAL_DIFF"
    fi
    if [ "x$$diffTool" = "x" ]; then
        $diffTool=$(which meld)
    fi
    echo $diffTool
}

compareFiles() {
    local diffTool="$1"
    if [ "$quiet" == true ]; then
        exec diff -q "/tmp/$outFileName" "$fileName"
    fi

    "$diffTool" "/tmp/$outFileName" "$fileName"
}


set -e
parseArgs "$@"
adjustPaths
gitFetchFile
diffTool=$(getGitDiffTool)
compareFiles $diffTool
