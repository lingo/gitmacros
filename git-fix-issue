#!/usr/bin/env node
const { spawnSync } = require('child_process');
const { writeFileSync, unlinkSync, readFileSync } = require('fs');
const path = require('path');

let programName = 'git fix-issue';
let isOutputToATerminal = false;

const isGitCola = process.env.GIT_COLA_WRITE_MESSAGE === 'git-fix-issue';

function usage(program = programName) {
  process.stderr.write(`Usage: ${program} "https://gitlab.com/.../-/issues/..."\n(or have issue link in clipboard)\n`);
  process.exit(1);
}

function run(command, args = [], options = {}) {
  const cp = spawnSync(command, args, {
    encoding: 'utf8',
    stdio: ['ignore', 'pipe', 'pipe'],
    ...options,
  });

  if (cp.error) {
    throw cp.error;
  }

  return cp.output;
}

// e.g. https://gitlab.com/marama-labs-software/marama-frontend/-/issues/142
function getFromClipboard() {
  const output = run('xclip', ['-o', '-selection', 'clipboard']);
  return output.filter(Boolean).join('');
}

function saveToClipboard(data) {
  const cp = spawnSync('xclip', ['-i', '-selection', 'clipboard'], {
    input: data,
    encoding: 'utf8',
    stdio: ['pipe', 'ignore', 'ignore'],
  });

  if (cp.status !== 0) {
    throw cp.error || new Error(`xclip -i failed, status ${cp.status}`);
  }
}

function gitRoot() {
  const output = run('git', ['rev-parse', '--show-toplevel']);
  return output.filter(Boolean).join('').trim();
}

function runGitCommit(message) {
  const commitMessageFile = `${gitRoot()}/.git/GIT_FIX_ISSUE_COMMIT_MESSAGE`;
  try {
    writeFileSync(commitMessageFile, message, { encoding: 'utf-8' });
    const output = run('git', ['commit', '-F', commitMessageFile, '-e'], { stdio: 'inherit' });
    return output.filter(Boolean).map((x) => x.trim());
  } finally {
    try {
      unlinkSync(commitMessageFile);
    } catch {
      // ignore
    }
  }
}

function hasStagedFiles() {
  const output = run('git', ['diff', '--name-only', '--cached']);
  return output.filter(Boolean).length > 0;
}

function getLink(args) {
  let [, , link] = args;

  if (!link) {
    link = getFromClipboard();
  }

  return link;
}

function getCommitMessage(link, existingText) {
  if (link.match(/^fix.*#\d+/)) {
    return link;
  }

  if (!link.match(/^\s*https:\/\/gitlab.com.+issues\/\d+\s*$/)) {
    throw new Error('Bad link');
  }

  const [, issue] = link.match(/https:\/\/gitlab.com\/.+\/issues\/(\d+)/);
  if (!issue) {
    process.stderr.write(`Malformed issue link: ${link}\n`);
    process.exit(1);
  }

  if (String(existingText).match(/^fix: CHANGEME/)) {
    return existingText;
  }

  return `fix: CHANGEME #${issue}\n\n${existingText ? `${existingText}\n` : ''}Fixes: #${issue}\nIssue-Link: ${link}\n`;
}

function performCommit(commitMessage) {
  process.stdout.write(commitMessage);

  if (hasStagedFiles()) {
    runGitCommit(commitMessage);
  }
}

// eslint-disable-next-line consistent-return
function getCommitMessageOrFail(link, existingText = '') {
  try {
    return getCommitMessage(link, existingText);
  } catch (error) {
    process.stderr.write(`${error.message}\n`);
    usage();
  }
}

function getLinkOrFail(args) {
  const link = getLink(args);

  if (!link) {
    usage();
  }

  return link;
}

function processArgs(args) {
  const [, program] = args;
  programName = program || programName;

  ({ isTTY: isOutputToATerminal } = process.stdout);

  if (args.find((a) => /^--?h(elp)?/.test(a))) {
    usage();
  }
}

function main(args) {
  processArgs(args);

  const link = getLinkOrFail(args);
  const msgPath = path.join(gitRoot(), '.git/GIT_COLA_MSG');
  const existingText = readFileSync(msgPath, { encoding: 'utf-8' });
  const commitMessage = getCommitMessageOrFail(link, existingText);

  if (isOutputToATerminal) {
    performCommit(commitMessage);
  } else if (isGitCola) {
    writeFileSync(msgPath, commitMessage, { encoding: 'utf-8' });
  } else {
    saveToClipboard(commitMessage);
  }
}

main(process.argv);
